# Optimiztions
- 애플리케이션속도와 core web vitals를 향상시키는 다양한 방법이있다.
- 사용자 경험을 증가 시킬수 있다.
## Built-in Components
- UI 최적화 향상의 복잡성을 추상화한다.
- Images: <img>요소를 기반으로 지연 로딩 및 자동으로 디바이스 사이즈에 따라 이미지 조정 하는 데 이미지 최적화한다.
- Link: <a>요소를 기반으로 background에서 더 빠르고 부드러운 페이지 전환을 위해 prefetch한다. 
- Script: <script>태그를 기반으로 다른 스크립트의 로드 및 실행을 제어한다.
## Metadata
- Metadata는 SEO에 내용을 더 이해하게 하고 소셜 미디어에 표시되는 방식을 사용자 정의 가능하게 한다.
- Metadata API는 페이지의 <head> 태그를 수정하여 사용한다.
- 2가지 방법으로 metadata를 configure 할 수 있다.
1. config-based metadata: dynamic generateMetadata함수를 layout.js 또는 page.js 파일에 static 형태로 export 한다.
2. File-based Metadata: 라우터 세그먼트에 static 또는 dynamic 파일을 추가한다.
- imageResponse 생성자 함께 JSX와 CSS에 사용하여 동적 오픈 Graph Images를 사용가능하다.
## Static Assets
- /public 폴더는 이미지나 폰트 그리고 다른 파일들을 server static assets처럼 사용할 수 있다. 
- /public 내부 파일은 CDN 공급자가 캐시할 수 있다.
## analtics and Monitoring
- 큰 어플리케이션을 위해 인기있는 분석과 모니터링 툴을 통합되어 어플리케이션 성능 이해에 도움 된다.
# Image Optimization
- <img> 요소의 확장이다.
- Size Optimization: 각 이미지를 위한 자동 서버 맞춤 사이즈 맞춤은 WebP와 AVIF 이미지 형식으로 사용한다.
- Visual Stablity: 이미지의 로딩동안 자동으로 레이아웃 이동 방지한다.
- Faster Page Loads: 선택적 블러 처리를 통해 기본 브라우저 지연 로딩을 사용하여 뷰포트에 들어갈 때만 로드 되게 한다.
- Asset Flexibility: 원격 서버에 저장된 이미지에 대해서도 ondemend 이미지 크기 조정한다.
## 사용법
```
import Image from 'next/image';
```
### Local Images
- lcoal image 사용을 위해 .jpg, .png, .webp 이미지 파일을 import한다.
- 가져온 파일 기반으로 이미지의 너비와 높이를 자동으로 결정한다. 이미지 로드시 누적 레이아웃 이동을 방지한다.
```
import Image from 'next/image';
import profilePic from './me.png';
 
export default function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  );
}
```
### Remote Images
- URL string으로 scr에 사용할 수 있다.
- 빌드 프로세스 중 원격 파일에 엑세스 할 수 없으므로 너비, 높이 및 선택 blurDataURL 소품을 수동으로 제공해야한다.
```
import Image from 'next/image';
 
export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  );
}
```
- 안전하게 이미지 최적화를 위해 URL patterns을 next.config.js에 제공해야한다.
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
      },
    ],
  },
};
```
### Domains
- 원격 이미지 최적화를 원하고 하는데  next.js 이미지 최적화 API를 사용할 수 있다.
- 로더를 기본 설정에 두고 절대 URL을 입력할 수 있다.
### Loaders
- 이미지를 위한 URLs 생성 함수이다.
- src에 제공하여 수정하고 다중 생성 URL들은 다른 사이즈의 이미지를 요구한다.
- 다중 URL들은 자동 srcset 생성에 사용되므로 사이트 방문자에게 뷰포트에 적합한 크기의 이미지가 제공된다.
- 모든 위치에서 이미지 최적화를 한 다음 웹 서버에서 직접 제공하는 내장 이미지 최적화 API를 사용합낟.
- CDN 또는 이미지 서버에서 직접 이미지를 제공하는 경우 JS로 고유한 로더 함수를 작성할 수 있다.
### Priority
- 각 페이지에 큰 요소가 될 이미지의 우선순위 속성을 추가하여 로드 이미지 순서를 지정할 수 있다.
- LPC 요소는 일만적으로 페이지 뷰포트내에서 볼 수 있는 가장 큰 이미지 텍스트 블록이다.
- LPC 요소가 priority속성이 없는 경우 콘솔 경고가 발생한다.
```
import Image from 'next/image';
import profilePic from '../public/me.png';
 
export default function Page() {
  return <Image src={profilePic} alt="Picture of the author" priority />;
}
```
## Image Sizing
- 이미지 성능 저해는 이미지가 로드될 때 페이지의 다른 요소를 밀어 내는 레이아웃 이동을 통한 것이다.
- 이 문제는 Cumulative Layout shift라고 불리는 Core Web Vital이다.
- 해당 문제를 피하기 위해 항상 이미지 크기를 조정하는 것이 있다.
- 브라우저는 이미지가 로드 전 이미지 공간을 미리 생성하여 방지 할 수 있다.
- next/image는 3가지 방법으로 좋은 포퍼먼스를 이끈다.
1. 자동으로 static import 가져오기
2. 명시적으로 width와 height 적기
3. 암묵적으로, 이미지 확장되어 부모 요소를 채우는 채우기 사용한다.
## Styling
- 이미지 컴포넌트의 스타일링은 보통 <img>요소 스타일 지정과 비슷하지만 유의해야 할 몇 가지 지침이 있다.
- className 또는 style사용/styled-jsx 사용 금지
- fill 사용시 부모 요소를 position: relative 해야함
- fill 사용시 자식 요소를 display: block 해야함

